{{=<% %>=}}

# ⚙️ Generated by InfraBuddy — github.com/alexindevs/infrabuddy

name: Build and Deploy (Flask)

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          <%#use_poetry%>
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi
          <%/use_poetry%>
          <%^use_poetry%>
          pip install --no-cache-dir -r requirements.txt
          <%/use_poetry%>

      - name: 🧪 Run tests
        run: |
          <%#use_poetry%>
          poetry run pytest || true
          <%/use_poetry%>
          <%^use_poetry%>
          pytest || true
          <%/use_poetry%>

      <%#is_dockerized%>
      - name: ✍️ Write .env file from secrets
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: 🐳 Build Docker image
        run: docker compose -f docker/compose.yml build

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🚀 Push Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/<% project_name %>
          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
          docker push ${IMAGE_NAME}:latest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      <%/is_dockerized%>

      <%#deploy_ssh%>
      - name: 📡 Deploy to server via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            <%#is_dockerized%>
            docker pull ${{ secrets.DOCKER_USERNAME }}/<% project_name %>:latest
            docker compose -f docker/compose.yml down
            docker compose -f docker/compose.yml up --build -d
            <%/is_dockerized%>
            <%^is_dockerized%>
            git pull
            <%#use_poetry%>
            poetry install --no-interaction --no-ansi
            <%/use_poetry%>
            <%^use_poetry%>
            pip install --no-cache-dir -r requirements.txt
            <%/use_poetry%>

            <%#use_gunicorn%>
            pm2 restart "gunicorn -b 0.0.0.0:<% port %> app:app"
            <%/use_gunicorn%>

            <%#use_uwsgi%>
            pm2 restart "uwsgi --http :<% port %> --wsgi-file app.py --callable app"
            <%/use_uwsgi%>

            <%#use_flask_run%>
            pm2 restart "flask run --host=0.0.0.0 --port=<% port %>"
            <%/use_flask_run%>
            <%/is_dockerized%>
      <%/deploy_ssh%>
